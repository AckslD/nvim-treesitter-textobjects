name: Release parsers

on:
  push:
    branches: master

jobs:
  tests:
    name: Compile parsers and run tests
    strategy:
      matrix:
        os: ['ubuntu-latest', 'windows-latest', 'macos-latest']
        include:
        - os: macos-latest
          nvim: nvim
        - os: ubuntu-latest
          nvim: nvim
        - os: windows-latest
          nvim: C:\\tools\\neovim\\Neovim\\bin\\nvim.exe

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Prepare (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo add-apt-repository universe
          wget https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage
          chmod u+x nvim.appimage
          mkdir -p ~/.local/share/nvim/site/pack/nvim-treesitter/start
          ln -s $(pwd) ~/.local/share/nvim/site/pack/nvim-treesitter/start
          sudo cp ./nvim.appimage /usr/bin/nvim
          sudo chmod uog+rwx /usr/bin/nvim

      - name: Prepare (MacOS)
        if: matrix.os == 'macos-latest'
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)" && brew install neovim --HEAD
          mkdir -p ~/.local/share/nvim/site/pack/nvim-treesitter/start
          ln -s $(pwd) ~/.local/share/nvim/site/pack/nvim-treesitter/start

      - name: Prepare and compile Parsers (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install neovim --pre
          mkdir ~/AppData/Local/nvim/pack/nvim-treesitter/start
          mkdir ~/AppData/Local/nvim-data
          cp -r $(pwd) ~/AppData/Local/nvim/pack/nvim-treesitter/start
          ${{ os.nvim }} --headless -c "TSInstall all" -c "sleep 120" -c "q"
          cp -r ~/AppData/Local/nvim/pack/nvim-treesitter/start/nvim-treesitter/parser/* parser

      - name: Compile parsers
        if: matrix.os != 'windows-latest'
        run: ${{ os.nvim }} --headless -c "TSInstallSync all" -c "q"

      - uses: actions/upload-artifact@v2
        with:
          name: parsers-${{ matrix.os }}-x86_64
          path: parser/*

      - name: Compress parsers
        if: branch == 'master'
        run: |
           zip --junk-paths pre-built-parsers-${{matrix.os}}-x86_64 parser

      - name: Create Release
        if: branch == 'master'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: parsers
          release_name: Pre-compiled parsers
          draft: false
          prerelease: true

      - name: Upload Release Asset
        if: branch == 'master'
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./pre-built-parsers-${{matrix.os}}-x86_64.zip
          asset_name: pre-built-parsers-${{matrix.os}}-x86_64.zip
          asset_content_type: application/zip
